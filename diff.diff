diff --git a/ios/CCCameraModule.m b/ios/CCCameraModule.m
index bace4e6..2e68e8e 100644
--- a/ios/CCCameraModule.m
+++ b/ios/CCCameraModule.m
@@ -40,4 +40,13 @@ @implementation CCCameraModule
                                                       userInfo:nil];
 }
 
+RCT_EXPORT_METHOD(releaseCamera) {
+    isActive = NO;
+    
+    // Post a notification to let any interested objects know that the CCCameraModule is inactive
+    [[NSNotificationCenter defaultCenter] postNotificationName:@"CCCameraModuleReleaseNotification"
+                                                        object:self
+                                                      userInfo:nil];
+}
+
 @end
diff --git a/ios/CCCameraView.m b/ios/CCCameraView.m
index b956bc5..5b14b9e 100644
--- a/ios/CCCameraView.m
+++ b/ios/CCCameraView.m
@@ -81,6 +81,12 @@ -(void)setupView {
                                                  name:@"CCCameraModuleInactiveNotification"
                                                object:nil];
 
+    // Register to receive a notification when the CCCameraModule is force released
+    [[NSNotificationCenter defaultCenter] addObserver:self
+                                             selector:@selector(onRelease:)
+                                                 name:@"CCCameraModuleReleaseNotification"
+                                               object:nil];
+
     // Register to receive notifications when the app is sent to the background or enters the foreground
     [[NSNotificationCenter defaultCenter] addObserver:self selector:@selector(onSetActive:) name:UIApplicationDidBecomeActiveNotification object:nil];
     [[NSNotificationCenter defaultCenter] addObserver:self selector:@selector(onSetInactive:) name:UIApplicationDidEnterBackgroundNotification object:nil];
@@ -130,6 +136,28 @@ -(void)onSetInactive:(NSNotification *)notification {
     self.isActive = NO;
 }
 
+// This method responds to the CCCameraModuleReleaseNotification
+-(void)onRelease:(NSNotification *)notification {
+
+    [[NSNotificationCenter defaultCenter] removeObserver:self];
+    [[NSNotificationCenter defaultCenter] removeObserver:self.camera];
+
+    // Stop the volumeButtonHandler
+    [self.volumeButtonHandler stopHandler];
+
+    // Release the camera
+    id<CCCameraDelegate> cameraDelegate = (id<CCCameraDelegate>)self.camera;
+    [cameraDelegate releaseCamera];
+
+    // remove any react subviews
+    NSArray<id<RCTComponent>> *childSubviews = [self reactSubviews];
+    for (int i = 0; i < childSubviews.count; i++) {
+        [self removeReactSubview:(UIView *)childSubviews[i]];
+    }
+
+    self.isActive = NO;
+}
+
 #pragma mark Component props - functions
 
 // This method invokes the onClose prop
